#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ Tor –∏—Å—Ö–æ–¥–Ω–∏–∫–∞—Ö –¥–ª—è iOS

TOR_SRC="tor-0.4.8.19"
TOR_FIXED="tor-ios-fixed"

echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ Tor –¥–ª—è iOS..."

# –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–∏
rm -rf "$TOR_FIXED"
cp -R "$TOR_SRC" "$TOR_FIXED"

cd "$TOR_FIXED"

# 1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å torint.h - —É–±—Ä–∞—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ssize_t
echo "  üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ src/lib/cc/torint.h..."
cat > src/lib/cc/torint.h.new << 'EOF'
#ifndef TOR_TORINT_H
#define TOR_TORINT_H

#include <stdint.h>
#include <sys/types.h>

/* Use system ssize_t on iOS */
/* #define ssize_t - already defined by system */

#endif
EOF
mv src/lib/cc/torint.h.new src/lib/cc/torint.h

# 2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å compat_compiler.h - —É–±—Ä–∞—Ç—å –æ—à–∏–±–∫–∏ assertions
echo "  üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ src/lib/cc/compat_compiler.h..."
sed -i '' 's/#error "Your platform does not represent NULL as zero.*"/\/\* NULL check disabled for iOS \*\//' src/lib/cc/compat_compiler.h || true
sed -i '' 's/#error "Your platform does not represent 0.0 as zeros.*"/\/\* 0.0 check disabled for iOS \*\//' src/lib/cc/compat_compiler.h || true
sed -i '' 's/#error "Your platform.*arithmetic.*"/\/\* arithmetic check disabled for iOS \*\//' src/lib/cc/compat_compiler.h || true

# 3. –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Ñ–∞–π–ª—ã
echo "  üìù –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤..."
rm -f src/ext/strlcpy.c
rm -f src/ext/strlcat.c  
rm -f src/ext/getdelim.c
rm -f src/ext/readpassphrase.c

# 4. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤–∫–ª—é—á–µ–Ω–∏—è equix
echo "  üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ equix includes..."
find src/ext/equix -name "*.c" -exec sed -i '' 's/#include <equix\.h>/#include "..\/..\/..\/ext\/equix\/include\/equix.h"/' {} \;

# 5. –î–æ–±–∞–≤–∏—Ç—å SIZEOF_SOCKLEN_T –≤ orconfig.h
echo "  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ SIZEOF_SOCKLEN_T –≤ orconfig.h..."
if ! grep -q "SIZEOF_SOCKLEN_T" orconfig.h; then
    sed -i '' '/^#define SIZEOF_UINT64_T 8$/a\
#define SIZEOF_SOCKLEN_T 4
' orconfig.h
    echo "    ‚úÖ SIZEOF_SOCKLEN_T –¥–æ–±–∞–≤–ª–µ–Ω"
else
    echo "    ‚ÑπÔ∏è  SIZEOF_SOCKLEN_T —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
fi

# 6. –î–æ–±–∞–≤–∏—Ç—å includes –¥–ª—è bool –∏ timeval –≤ orconfig.h
echo "  üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ orconfig.h –¥–ª—è main.c..."
if ! grep -q "#include <stdbool.h>" orconfig.h; then
    sed -i '' '/#define TOR_ORCONFIG_H$/a\
\
/* Include stdbool.h first for bool type */\
#include <stdbool.h>\
#include <sys/time.h>
' orconfig.h
    echo "    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã includes –¥–ª—è bool –∏ timeval"
else
    echo "    ‚ÑπÔ∏è  Includes —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
fi

# 7. –ò—Å–ø—Ä–∞–≤–∏—Ç—å HAVE_SYSTEMD –∏ –¥–æ–±–∞–≤–∏—Ç—å HAVE_STRUCT_TIMEVAL
echo "  üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HAVE_SYSTEMD –∏ timeval..."
sed -i '' 's/#define HAVE_SYSTEMD 0/\/* #undef HAVE_SYSTEMD *\//' orconfig.h
if ! grep -q "HAVE_STRUCT_TIMEVAL_TV_SEC" orconfig.h; then
    sed -i '' '/USE_BUFFEREVENTS/a\
\
/* timeval structure */\
#define HAVE_STRUCT_TIMEVAL_TV_SEC 1\
#define HAVE_STRUCT_TIMEVAL_TV_USEC 1
' orconfig.h
    echo "    ‚úÖ HAVE_STRUCT_TIMEVAL –¥–æ–±–∞–≤–ª–µ–Ω—ã"
else
    echo "    ‚ÑπÔ∏è  HAVE_STRUCT_TIMEVAL —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
fi

# 8. –î–æ–±–∞–≤–∏—Ç—å HAVE_LIMITS_H –¥–ª—è INT_MIN/INT_MAX
echo "  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ HAVE_LIMITS_H..."
if ! grep -q "HAVE_LIMITS_H" orconfig.h; then
    sed -i '' '/^#define HAVE_GLOB_H 1$/a\
#define HAVE_LIMITS_H 1
' orconfig.h
    echo "    ‚úÖ HAVE_LIMITS_H –¥–æ–±–∞–≤–ª–µ–Ω"
else
    echo "    ‚ÑπÔ∏è  HAVE_LIMITS_H —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
fi

# 9. –î–æ–±–∞–≤–∏—Ç—å #include <limits.h> –≤ type_defs.c
echo "  üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ type_defs.c..."
if ! grep -q "#include <limits.h>" src/lib/confmgt/type_defs.c; then
    sed -i '' '/#include "orconfig.h"/a\
#include <limits.h>
' src/lib/confmgt/type_defs.c
    echo "    ‚úÖ #include <limits.h> –¥–æ–±–∞–≤–ª–µ–Ω –≤ type_defs.c"
else
    echo "    ‚ÑπÔ∏è  limits.h —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ type_defs.c"
fi

# 10. –î–æ–±–∞–≤–∏—Ç—å TIME_MAX –∏ TIME_MIN –¥–ª—è connection_edge.c –∏ periodic.c
echo "  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TIME_MAX –∏ TIME_MIN..."
if ! grep -q "TIME_MAX" orconfig.h; then
    sed -i '' '/^#define SIZEOF_SOCKLEN_T 4$/a\
\
/* time_t is 64-bit on iOS, so TIME_MAX is INT64_MAX */\
#ifndef TIME_MAX\
#define TIME_MAX INT64_MAX\
#endif\
#ifndef TIME_MIN\
#define TIME_MIN INT64_MIN\
#endif
' orconfig.h
    echo "    ‚úÖ TIME_MAX –∏ TIME_MIN –¥–æ–±–∞–≤–ª–µ–Ω—ã"
else
    echo "    ‚ÑπÔ∏è  TIME_MAX —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
fi

# 11. –î–æ–±–∞–≤–∏—Ç—å TOR_PRIuSZ –¥–ª—è circuitlist.c
echo "  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TOR_PRIuSZ..."
if ! grep -q "TOR_PRIuSZ" orconfig.h; then
    sed -i '' '/^#endif$/a\
\
/* Printf format for size_t */\
#ifndef TOR_PRIuSZ\
#define TOR_PRIuSZ "zu"\
#endif\
#ifndef TOR_PRIdSZ\
#define TOR_PRIdSZ "zd"\
#endif
' orconfig.h
    echo "    ‚úÖ TOR_PRIuSZ –¥–æ–±–∞–≤–ª–µ–Ω"
else
    echo "    ‚ÑπÔ∏è  TOR_PRIuSZ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
fi

# 12. –î–æ–±–∞–≤–∏—Ç—å INT_MAX/INT_MIN/UINT_MAX/LONG_MAX –¥–ª—è binascii.c –∏ crypto_rand_numeric.c
echo "  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ INT_MAX/INT_MIN/UINT_MAX/LONG_MAX..."
if ! grep -q "^#ifndef INT_MAX" orconfig.h; then
    sed -i '' '/^#define SIZEOF_SSIZE_T 8$/a\
\
/* INT_MAX for 32-bit int on iOS */\
#ifndef INT_MAX\
#define INT_MAX 2147483647\
#endif\
#ifndef INT_MIN\
#define INT_MIN (-INT_MAX - 1)\
#endif\
#ifndef UINT_MAX\
#define UINT_MAX 4294967295U\
#endif\
#ifndef LONG_MAX\
#define LONG_MAX 9223372036854775807L\
#endif\
#ifndef LONG_MIN\
#define LONG_MIN (-LONG_MAX - 1L)\
#endif\
#ifndef ULONG_MAX\
#define ULONG_MAX 18446744073709551615UL\
#endif
' orconfig.h
    echo "    ‚úÖ INT_MAX/INT_MIN/UINT_MAX/LONG_MAX –¥–æ–±–∞–≤–ª–µ–Ω—ã"
else
    echo "    ‚ÑπÔ∏è  INT_MAX —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
fi

# 13. –î–æ–±–∞–≤–∏—Ç—å SSIZE_MAX –∏ SIZE_T_CEILING –¥–ª—è binascii.c
echo "  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ SSIZE_MAX –∏ SIZE_T_CEILING..."
if ! grep -q "SSIZE_MAX" orconfig.h; then
    sed -i '' '/^#define SIZEOF_SOCKLEN_T 4$/a\
#define SIZEOF_SSIZE_T 8
' orconfig.h
    sed -i '' '/^#define TIME_MAX INT64_MAX$/a\
\
/* ssize_t is 64-bit on iOS (signed size_t) */\
#ifndef SSIZE_MAX\
#define SSIZE_MAX INT64_MAX\
#endif\
\
/* SIZE_T_CEILING and SSIZE_T_CEILING for overflow checks */\
#ifndef SIZE_T_CEILING\
#define SIZE_T_CEILING ((size_t)(SSIZE_MAX-16))\
#endif\
#ifndef SSIZE_T_CEILING\
#define SSIZE_T_CEILING ((ssize_t)(SSIZE_MAX-16))\
#endif
' orconfig.h
    echo "    ‚úÖ SSIZE_MAX –∏ SIZE_T_CEILING –¥–æ–±–∞–≤–ª–µ–Ω—ã"
else
    echo "    ‚ÑπÔ∏è  SSIZE_MAX —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
fi

# 14. –î–æ–±–∞–≤–∏—Ç—å SHARE_DATADIR, CONFDIR, COMPILER, APPROX_RELEASE_DATE –∏ –¥—Ä. –¥–ª—è config.c –∏ versions.c
echo "  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ SHARE_DATADIR, CONFDIR, COMPILER, APPROX_RELEASE_DATE..."
if ! grep -q "SHARE_DATADIR" orconfig.h; then
    sed -i '' '/^#define WORDS_BIGENDIAN 0$/a\
\
/* Paths for iOS (not used, but required for compilation) */\
#ifndef SHARE_DATADIR\
#define SHARE_DATADIR "/usr/share"\
#endif\
#ifndef CONFDIR\
#define CONFDIR "/etc/tor"\
#endif\
\
/* Compiler info (not accurate, but required for compilation) */\
#ifndef COMPILER_VENDOR\
#define COMPILER_VENDOR "apple"\
#endif\
#ifndef COMPILER\
#define COMPILER "clang"\
#endif\
#ifndef COMPILER_VERSION\
#define COMPILER_VERSION "15.0"\
#endif\
#ifndef LOCALSTATEDIR\
#define LOCALSTATEDIR "/var"\
#endif\
#ifndef APPROX_RELEASE_DATE\
#define APPROX_RELEASE_DATE "2024-10-06"\
#endif
' orconfig.h
    echo "    ‚úÖ SHARE_DATADIR, CONFDIR, COMPILER, APPROX_RELEASE_DATE –∏ –¥—Ä. –¥–æ–±–∞–≤–ª–µ–Ω—ã"
else
    echo "    ‚ÑπÔ∏è  SHARE_DATADIR —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
fi

# 15. –î–æ–±–∞–≤–∏—Ç—å HAVE_UTIME –∏ HAVE_GETDELIM –¥–ª—è files.c
echo "  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ HAVE_UTIME –∏ HAVE_GETDELIM..."
if ! grep -q "HAVE_GETDELIM" orconfig.h; then
    sed -i '' '/^#define HAVE_UNAME 1$/a\
#define HAVE_GETDELIM 1
' orconfig.h
    sed -i '' '/^#define HAVE_SYSCONF 1$/a\
#define HAVE_UTIME_H 1\
#define HAVE_UTIME 1
' orconfig.h
    echo "    ‚úÖ HAVE_UTIME –∏ HAVE_GETDELIM –¥–æ–±–∞–≤–ª–µ–Ω—ã"
else
    echo "    ‚ÑπÔ∏è  HAVE_GETDELIM —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
fi

# 16. –£–±—Ä–∞—Ç—å HAVE_EXPLICIT_BZERO –∏ HAVE_TIMINGSAFE_MEMCMP –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenSSL fallback
echo "  üìù –û—Ç–∫–ª—é—á–µ–Ω–∏–µ HAVE_EXPLICIT_BZERO –∏ HAVE_TIMINGSAFE_MEMCMP..."
sed -i '' 's/#define HAVE_EXPLICIT_BZERO 0/\/* #undef HAVE_EXPLICIT_BZERO *\//' orconfig.h
sed -i '' 's/#define HAVE_TIMINGSAFE_MEMCMP 0/\/* #undef HAVE_TIMINGSAFE_MEMCMP *\//' orconfig.h
echo "    ‚úÖ HAVE_EXPLICIT_BZERO –∏ HAVE_TIMINGSAFE_MEMCMP –æ—Ç–∫–ª—é—á–µ–Ω—ã (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è OpenSSL)"

# 17. –î–æ–±–∞–≤–∏—Ç—å RSHIFT_DOES_SIGN_EXTEND –¥–ª—è di_ops.c
echo "  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ RSHIFT_DOES_SIGN_EXTEND..."
if ! grep -q "RSHIFT_DOES_SIGN_EXTEND" orconfig.h; then
    sed -i '' '/^#define WORDS_BIGENDIAN 0$/a\
\
/* Arithmetic right-shift performs sign extension on iOS */\
#define RSHIFT_DOES_SIGN_EXTEND 1
' orconfig.h
    echo "    ‚úÖ RSHIFT_DOES_SIGN_EXTEND –¥–æ–±–∞–≤–ª–µ–Ω"
else
    echo "    ‚ÑπÔ∏è  RSHIFT_DOES_SIGN_EXTEND —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
fi

# 18. –ò—Å–ø—Ä–∞–≤–∏—Ç—å token_bucket.h –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è bool
echo "  üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ token_bucket.h..."
if ! grep -q "#include <stdbool.h>" src/lib/evloop/token_bucket.h; then
    sed -i '' '/#define TOR_TOKEN_BUCKET_H$/a\
\
#include <stdbool.h>
' src/lib/evloop/token_bucket.h
    echo "    ‚úÖ #include <stdbool.h> –¥–æ–±–∞–≤–ª–µ–Ω –≤ token_bucket.h"
else
    echo "    ‚ÑπÔ∏è  stdbool.h —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ token_bucket.h"
fi

# 19. –î–æ–±–∞–≤–∏—Ç—å OpenSSL 3.x compatibility defines
echo "  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ OpenSSL 3.x compatibility..."
if ! grep -q "HAVE_SSL_GET_CLIENT_RANDOM" orconfig.h; then
    sed -i '' '/^#define ENABLE_OPENSSL 1$/a\
\
/* OpenSSL 3.x has these functions built-in */\
#define HAVE_SSL_GET_CLIENT_RANDOM 1\
#define HAVE_SSL_GET_SERVER_RANDOM 1\
#define HAVE_SSL_SESSION_GET_MASTER_KEY 1\
#define HAVE_SSL_GET_CLIENT_CIPHERS 1
' orconfig.h
    echo "    ‚úÖ OpenSSL 3.x compatibility defines –¥–æ–±–∞–≤–ª–µ–Ω—ã"
else
    echo "    ‚ÑπÔ∏è  OpenSSL 3.x defines —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
fi

# 20. –î–æ–±–∞–≤–∏—Ç—å HAVE_RLIM_T, HAVE_CRT_EXTERNS_H, HAVE_SYS_RESOURCE_H
echo "  üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ HAVE_RLIM_T, HAVE_CRT_EXTERNS_H, HAVE_SYS_RESOURCE_H..."
if ! grep -q "HAVE_RLIM_T" orconfig.h; then
    sed -i '' '/^#define HAVE_GETRLIMIT 1$/a\
#define HAVE_RLIM_T 1
' orconfig.h
    echo "    ‚úÖ HAVE_RLIM_T –¥–æ–±–∞–≤–ª–µ–Ω"
else
    echo "    ‚ÑπÔ∏è  HAVE_RLIM_T —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
fi
if ! grep -q "HAVE_CRT_EXTERNS_H" orconfig.h; then
    sed -i '' '/^#define HAVE_LIMITS_H 1$/a\
#define HAVE_CRT_EXTERNS_H 1\
#define HAVE_SYS_RESOURCE_H 1
' orconfig.h
    echo "    ‚úÖ HAVE_CRT_EXTERNS_H –∏ HAVE_SYS_RESOURCE_H –¥–æ–±–∞–≤–ª–µ–Ω—ã"
else
    echo "    ‚ÑπÔ∏è  HAVE_CRT_EXTERNS_H —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
fi

# 20b. –ò—Å–ø—Ä–∞–≤–∏—Ç—å restrict.h –¥–ª—è include sys/resource.h
echo "  üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ restrict.h..."
if ! grep -q "sys/resource.h" src/lib/process/restrict.h; then
    sed -i '' '/#if !defined(HAVE_RLIM_T)/i\
\
#ifdef HAVE_SYS_RESOURCE_H\
#include <sys/resource.h>\
#endif\

' src/lib/process/restrict.h
    echo "    ‚úÖ restrict.h –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
else
    echo "    ‚ÑπÔ∏è  restrict.h —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
fi

# 21. –°–æ–∑–¥–∞—Ç—å micro-revision.i –¥–ª—è git_revision.c
echo "  üìù –°–æ–∑–¥–∞–Ω–∏–µ micro-revision.i..."
if [ ! -f "src/lib/version/micro-revision.i" ]; then
    echo '"git-unknown"' > src/lib/version/micro-revision.i
    echo "    ‚úÖ micro-revision.i —Å–æ–∑–¥–∞–Ω"
else
    echo "    ‚ÑπÔ∏è  micro-revision.i —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# 22. –ò—Å–ø—Ä–∞–≤–∏—Ç—å dos_config.c - –¥–æ–±–∞–≤–∏—Ç—å stdbool.h
echo "  üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ dos_config.c..."
if ! grep -q "#include <stdbool.h>" src/core/or/dos_config.c; then
    sed -i '' '1i\
#include <stdbool.h>\

' src/core/or/dos_config.c
    echo "    ‚úÖ #include <stdbool.h> –¥–æ–±–∞–≤–ª–µ–Ω –≤ dos_config.c"
else
    echo "    ‚ÑπÔ∏è  stdbool.h —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ dos_config.c"
fi

# 23. –ò—Å–ø—Ä–∞–≤–∏—Ç—å alertsock.c - –æ—Ç–∫–ª—é—á–∏—Ç—å Linux-only —Ñ—É–Ω–∫—Ü–∏–∏
echo "  üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ alertsock.c –¥–ª—è iOS..."
cat > src/lib/net/alertsock_ios.patch << 'EOFALERT'
--- a/src/lib/net/alertsock.c
+++ b/src/lib/net/alertsock.c
@@ -200,7 +200,7 @@ alert_sockets_create(alert_sockets_t *socks_out, uint32_t flags)
 
   /* Try eventfd, if it's supported */
 #ifdef HAVE_EVENTFD
-    socks[0] = eventfd(0,0);
+    /* socks[0] = eventfd(0,0); */ /* iOS: eventfd not supported */
 #endif
   if (socks[0] < 0 && (flags & ASOCKS_NOEVENTFD2)) {
     /* Retry if pipe2 is broken */
@@ -224,7 +224,7 @@ alert_sockets_create(alert_sockets_t *socks_out, uint32_t flags)
   /* We haven't found anything that worked yet.  Try pipe2(), if it exists. */
   if (socks[0] < 0 && socks[1] < 0 &&
       !(flags & ASOCKS_NOPIPE2) &&
-      pipe2(socks, O_NONBLOCK|O_CLOEXEC) == 0) {
+      0) { /* iOS: pipe2 not supported, skip */
     socks_out->read_fd = socks[0];
     socks_out->write_fd = socks[1];
     socks_out->alert_fn = pipe_alert;
EOFALERT

# –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω)
if grep -q "socks\[0\] = eventfd" src/lib/net/alertsock.c; then
    sed -i '' 's/socks\[0\] = eventfd(0,0);/\/\* socks[0] = eventfd(0,0); \*\/ \/\* iOS: eventfd not supported \*\//' src/lib/net/alertsock.c
    sed -i '' 's/pipe2(socks, O_NONBLOCK|O_CLOEXEC) == 0/0 \/\* iOS: pipe2 not supported, skip \*\//' src/lib/net/alertsock.c
    # –ó–∞–º–µ–Ω–∏—Ç—å pipe_alert/pipe_drain –Ω–∞ sock_alert/sock_drain
    sed -i '' 's/pipe_alert/sock_alert/g' src/lib/net/alertsock.c
    sed -i '' 's/pipe_drain/sock_drain/g' src/lib/net/alertsock.c
    echo "    ‚úÖ alertsock.c –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è iOS (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è socketpair fallback)"
else
    echo "    ‚ÑπÔ∏è  alertsock.c —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
fi

# 24. –°–æ–∑–¥–∞—Ç—å stub –¥–ª—è setuid.c (iOS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–º–µ–Ω—É uid/gid)
echo "  üìù –°–æ–∑–¥–∞–Ω–∏–µ iOS-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ setuid_stub.c..."
cat > src/lib/process/setuid_ios_stub.c << 'EOFSETUID'
/* iOS stub –¥–ª—è setuid.c - iOS sandbox –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–º–µ–Ω—É uid/gid */
#ifdef __APPLE__
#include <stdio.h>
#include <errno.h>

#include "lib/process/setuid.h"
#include "lib/log/log.h"

void
log_credential_status(void)
{
  log_info(LD_GENERAL, "iOS: Running in app sandbox, uid/gid management not available");
}

int
switch_id(const char *user, unsigned flags)
{
  (void)user;
  (void)flags;
  log_warn(LD_GENERAL, "iOS: switch_id() not supported in iOS sandbox");
  return -1;
}

#ifdef HAVE_PWD_H
const struct passwd *
tor_getpwnam(const char *username)
{
  (void)username;
  errno = ENOSYS;
  return NULL;
}

const struct passwd *
tor_getpwuid(uid_t uid)
{
  (void)uid;
  errno = ENOSYS;
  return NULL;
}
#endif

#endif /* __APPLE__ */
EOFSETUID

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π setuid.c
if [ ! -f "src/lib/process/setuid_linux.c.bak" ]; then
    mv src/lib/process/setuid.c src/lib/process/setuid_linux.c.bak
    echo "    ‚úÖ setuid.c –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ setuid_linux.c.bak"
fi

# –°–æ–∑–¥–∞—Ç—å —Å–∏–º–ª–∏–Ω–∫ –Ω–∞ stub
if [ ! -L "src/lib/process/setuid.c" ]; then
    ln -s setuid_ios_stub.c src/lib/process/setuid.c
    echo "    ‚úÖ setuid.c —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ iOS stub"
else
    echo "    ‚ÑπÔ∏è  setuid.c —É–∂–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ stub"
fi

# 25. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è curved25519_scalarmult_basepoint_donna
echo "  üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ curved25519_scalarmult_basepoint_donna..."
cat > src/ext/ed25519/donna/curve25519_donna_impl.c << 'EOFCURVE'
/* –†–µ–∞–ª–∏–∑–∞—Ü–∏—è curved25519_scalarmult_basepoint_donna –¥–ª—è iOS */
/* –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–∫–ª–∞—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ Tor –∏—Å—Ö–æ–¥–Ω–∏–∫–∞—Ö */

#include "ext/ed25519/donna/ed25519_donna_tor.h"

/* Basepoint for curve25519 */
static const unsigned char curve25519_basepoint[32] = {9};

/* –û–±—ä—è–≤–ª–µ–Ω–∏–µ curve25519_donna –∏–∑ curve25519-donna.c */
extern int curve25519_donna(unsigned char *mypublic,
                            const unsigned char *secret,
                            const unsigned char *basepoint);

/* Wrapper –∫ curve25519 scalar multiplication —Å basepoint */
void
curved25519_scalarmult_basepoint_donna(curved25519_key pk,
                                       const curved25519_key e)
{
  /* –ò—Å–ø–æ–ª—å–∑—É–µ–º curve25519_donna –Ω–∞–ø—Ä—è–º—É—é */
  /* –≠—Ç–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ —á–µ–º ed25519-optimized –≤–µ—Ä—Å–∏—è, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç */
  curve25519_donna(pk, e, curve25519_basepoint);
}
EOFCURVE

echo "    ‚úÖ curve25519_donna_impl.c —Å–æ–∑–¥–∞–Ω"

# 26. ========================================
#     –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–ê–¢–ß: crypto_rand_fast.c –¥–ª—è iOS
#     –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç assertion failure –Ω–∞ inherit != INHERIT_RES_KEEP
#     ========================================
echo "  üìù –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—á–∞ –∫ crypto_rand_fast.c..."

CRYPTO_FILE="src/lib/crypt_ops/crypto_rand_fast.c"

# –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?
if [ ! -f "$CRYPTO_FILE" ]; then
    echo "      ‚ùå CRITICAL ERROR: $CRYPTO_FILE not found!"
    echo "      üìÇ Current directory: $(pwd)"
    echo "      üìÇ Files in src/lib/crypt_ops/:"
    ls -la src/lib/crypt_ops/ | head -10
    exit 1
fi

echo "      üìÇ Working with: $CRYPTO_FILE"
echo "      üìè File size: $(wc -c < "$CRYPTO_FILE") bytes"
echo "      üìÑ Line 187 BEFORE patch: $(sed -n '187p' "$CRYPTO_FILE" 2>/dev/null || echo 'N/A')"

if ! grep -q "iOS PATCH: Platform doesn't support non-inheritable memory" "$CRYPTO_FILE"; then
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á —á–µ—Ä–µ–∑ Python
    # –ù–∞—Ö–æ–¥–∏–º tor_assertf(inherit != INHERIT_RES_KEEP –≤ —Ñ—É–Ω–∫—Ü–∏–∏ crypto_fast_rng_new_from_seed
    # –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ü–ï–†–ï–î –Ω–∏–º
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å—Ç—å
    if grep -q "tor_assertf(inherit != INHERIT_RES_KEEP" "$CRYPTO_FILE"; then
        echo "      üîß Applying universal patch with Python..."
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–π –∑–∞–º–µ–Ω—ã
        python3 << 'PYTHON_PATCH_EOF'
import re

with open('src/lib/crypt_ops/crypto_rand_fast.c', 'r') as f:
    content = f.read()

# –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏—é crypto_fast_rng_new_from_seed
# –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å tor_assertf(inherit != INHERIT_RES_KEEP
# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ü–ï–†–ï–î tor_assertf

# –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å –±–ª–æ–∫ assert –Ω–∞ —É—Å–ª–æ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è iOS
pattern = r'(#else\n  /\* We decided above that noinherit would always do _something_\. Assert here\n   \* that we were correct\. \*/\n  )tor_assertf\(inherit != INHERIT_RES_KEEP,[^)]+\);'

replacement = r'''\1/* iOS PATCH: Platform doesn't support non-inheritable memory (iOS).
   * INHERIT_RES_KEEP is returned, which means we rely on CHECK_PID above
   * to detect forks. This is acceptable for iOS as it rarely forks.
   * Original assertion would crash here, so we skip it for KEEP. */
  if (inherit != INHERIT_RES_KEEP) {
    /* Non-iOS platforms should have succeeded with NOINHERIT */
    tor_assertf(inherit != INHERIT_RES_KEEP,
                "We failed to create a non-inheritable memory region, even "
                "though we believed such a failure to be impossible! This is "
                "probably a bug in Tor support for your platform; please report "
                "it.");
  } else {
    /* iOS: INHERIT_RES_KEEP is expected and acceptable */
    log_info(LD_CRYPTO, "Using memory with INHERIT_RES_KEEP on iOS (with PID check).");
  }'''

content = re.sub(pattern, replacement, content, flags=re.MULTILINE | re.DOTALL)

with open('src/lib/crypt_ops/crypto_rand_fast.c', 'w') as f:
    f.write(content)

print("        ‚úÖ crypto_rand_fast.c patched successfully!")
PYTHON_PATCH_EOF

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê —á—Ç–æ –ø–∞—Ç—á –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è
        echo "      üîç CRITICAL VERIFICATION: Checking if patch was applied..."
        echo "      üìÑ Line 187 AFTER patch: $(sed -n '187p' "$CRYPTO_FILE" 2>/dev/null || echo 'N/A')"
        
        if grep -q "iOS PATCH: Platform doesn't support non-inheritable memory" "$CRYPTO_FILE"; then
            echo "      ‚úÖ‚úÖ‚úÖ Patch VERIFIED in crypto_rand_fast.c!"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ç—á–µ–Ω–Ω—ã–π –∫–æ–¥
            echo "      üìÑ Patched code (lines 183-197):"
            sed -n '183,197p' "$CRYPTO_FILE"
            echo "      "
            echo "      ‚úÖ SUCCESS: Patch is in source code!"
        else
            echo "      ‚ùå‚ùå‚ùå CRITICAL: Patch verification FAILED!"
            echo "      üìÑ Actual content around line 187:"
            sed -n '180,200p' "$CRYPTO_FILE"
            exit 1
        fi
    else
        echo "      ‚ùå tor_assertf(inherit != INHERIT_RES_KEEP not found in $CRYPTO_FILE!"
        exit 1
    fi
else
    echo "      ‚ÑπÔ∏è  Patch already applied to crypto_rand_fast.c"
fi

cd ..

echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ $TOR_FIXED/"
echo ""
echo "–¢–µ–ø–µ—Ä—å –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é..."

